@model List<Google.Apis.YouTube.v3.Data.SearchResult>



@foreach (var item in Model)
{
    <div class="row">
        <div class="col-sm-4">
            <br />
            @item.Snippet.Title
            <br />
            <p><a class="btn btn-default" href="javascript:void(0)" onclick="player.destroy(); onYouTubeIframeAPIReady('@item.Id.VideoId');">Agregar</a></p>
            @*<p><a class="btn btn-default" href="javascript:void(0)" onclick="btnbuscar();">Agregar</a></p>*@
            <img class="img-responsive" src="http://img.youtube.com/vi/@item.Id.VideoId/mqdefault.jpg">
            @*<button type="button" onclick="player.destroy(); onYouTubeIframeAPIReady('@item.Id.VideoId');" class="btn btn-danger">Agregar</button>*@
            @*<iframe width="560" height="315" src="https://www.youtube.com/embed/@item.Id.VideoId" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>*@
            @*<iframe width="260" height="200" src="https://www.youtube.com/embed/@item.Id.VideoId" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>*@
            <br />
        </div>
    </div>
}

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady(VideoId) {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: VideoId,
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            //console.log('Finish');

            //siguiente video en espera

            //setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }
</script>

<script>
    function btnbuscar()
    {
        $.ajax(
            {
                url: '@Url.Action("AddToPlayList","Home")?IdVideo='+$('#IdVideo').val(),
                success: function (result)
                {
                    $('#Playlist').html(result);
                    //respuesta
                }
            });
    }
</script>



<div class="row">
    <div class="col-sm-4">
        <div style="overflow-x:scroll;">
            <table class="table table-striped table-bordered table-hover">
                <tr id="playlist">
                </tr>
            </table>
        </div>
    </div>
</div>

<style>
    #playlist{
        overflow-x:scroll;
    }
</style>



